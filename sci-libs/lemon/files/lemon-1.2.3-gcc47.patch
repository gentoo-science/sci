diff -Nur lemon-1.2.3.orig/lemon/adaptors.h lemon-1.2.3/lemon/adaptors.h
--- lemon-1.2.3.orig/lemon/adaptors.h	2013-07-10 09:28:46.293503981 -0700
+++ lemon-1.2.3/lemon/adaptors.h	2013-07-10 09:30:05.968962785 -0700
@@ -1371,7 +1371,7 @@
     /// Creates a subgraph for the given graph with the given node
     /// and edge filter maps.
     SubGraph(GR& graph, NF& node_filter, EF& edge_filter) {
-      initialize(graph, node_filter, edge_filter);
+      this->initialize(graph, node_filter, edge_filter);
     }
 
     /// \brief Sets the status of the given node
@@ -2277,7 +2277,7 @@
     ///
     /// Creates an undirected graph from the given digraph.
     Undirector(DGR& digraph) {
-      initialize(digraph);
+      this->initialize(digraph);
     }
 
     /// \brief Arc map combined from two original arc maps
diff -Nur lemon-1.2.3.orig/lemon/bits/edge_set_extender.h lemon-1.2.3/lemon/bits/edge_set_extender.h
--- lemon-1.2.3.orig/lemon/bits/edge_set_extender.h	2013-07-10 09:28:46.293503981 -0700
+++ lemon-1.2.3/lemon/bits/edge_set_extender.h	2013-07-10 09:32:23.647752824 -0700
@@ -523,13 +523,13 @@
     //
     // Returns the base node of the iterator
     Node baseNode(const IncEdgeIt &e) const {
-      return e.direction ? u(e) : v(e);
+      return e.direction ? this->u(e) : this->v(e);
     }
     // Running node of the iterator
     //
     // Returns the running node of the iterator
     Node runningNode(const IncEdgeIt &e) const {
-      return e.direction ? v(e) : u(e);
+      return e.direction ? this->v(e) : this->u(e);
     }
 
 
diff -Nur lemon-1.2.3.orig/lemon/bits/graph_extender.h lemon-1.2.3/lemon/bits/graph_extender.h
--- lemon-1.2.3.orig/lemon/bits/graph_extender.h	2013-07-10 09:28:46.293503981 -0700
+++ lemon-1.2.3/lemon/bits/graph_extender.h	2013-07-10 09:30:45.954190124 -0700
@@ -587,13 +587,13 @@
     //
     // Returns the base node of the iterator
     Node baseNode(const IncEdgeIt &edge) const {
-      return edge._direction ? u(edge) : v(edge);
+      return edge._direction ? this->u(edge) : this->v(edge);
     }
     // Running node of the iterator
     //
     // Returns the running node of the iterator
     Node runningNode(const IncEdgeIt &edge) const {
-      return edge._direction ? v(edge) : u(edge);
+      return edge._direction ? this->v(edge) : this->u(edge);
     }
 
     // Mappable extension
