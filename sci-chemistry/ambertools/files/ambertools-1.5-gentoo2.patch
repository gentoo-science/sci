diff -urN amber11.orig/AmberTools/src/configure amber11/AmberTools/src/configure
--- amber11.orig/AmberTools/src/configure	2011-10-25 15:01:28.222288537 +0300
+++ amber11/AmberTools/src/configure	2011-10-25 23:57:37.732371794 +0300
@@ -293,7 +293,7 @@
    echo "Your AMBERHOME environment variable is not set! It should be set to"
    echo "$ambhome  NOT doing so may cause errors when you compile. Continue"
    echo "anyway? (yes or no)"
-   read answer
+   answer='yes'
    if [ "$answer" = 'yes' -o "$answer" = 'Yes' -o "$answer" = 'YES' -o "$answer" = 'y' -o "$answer" = 'Y' ]; then
       echo ""
       echo "Continuing anyway... Setting AMBERHOME to $ambhome temporarily"
@@ -356,11 +356,11 @@
 mpi_flag=
 lex=flex
 flibs_mkl=
-lapack=install
-blas=install
+lapack=skip
+blas=skip
 f2c=skip
-ucpp=install
-cpp="\$(BINDIR)/ucpp -l"
+ucpp=skip
+cpp="\$(EPREFIX)/usr/bin/ucpp -l"
 
 #-----------------------------------
 # skip building of sleap?
@@ -548,13 +548,14 @@
     flibs_arch=-lgfortran
     flibsf_arch=
     cc=gcc
-    cflags=
+    cflags="GENTOO_CFLAGS"
 #   ambercflags="-Wall"
     cplusplus=g++
-    cxxflags=
+    cxxflags="GENTOO_CXXFLAGS"
 #   ambercxxflags="-Wall"
     fc=gfortran
-    fflags=
+    fflags="GENTOO_FFLAGS"
+    ldflags="GENTOO_LDFLAGS"
     staticflag='-static'
     
     # If -noopt has been requested, force lack of optimisation;
@@ -575,11 +576,11 @@
       foptflags=""
     else
       cnooptflags=
-      coptflags="-O3"
+      coptflags="GENTOO_CFLAGS"
       cxxnooptflags=
-      cxxoptflags="-O3"
+      cxxoptflags="GENTOO_CXXFLAGS"
       fnooptflags="-O0"
-      foptflags="-O3"
+      foptflags="GENTOO_FFLAGS"
     fi
     
     # Debugging options
@@ -1653,28 +1654,6 @@
   /bin/rm -f testp.c testp$objsuffix testp$suffix
 
   #--------------------------------------------------------------------------
-  #  Configure fftw-3.2.2:
-  #--------------------------------------------------------------------------
-  if [ "$mdgx" = 'yes' ]; then
-      mdgxflag="--prefix=$AMBERHOME --disable-fortran" 
-      echo
-      echo "Configuring fftw-3.2.2 (may be time-consuming)..."
-      echo
-      cd fftw-3.2.2 && \
-      env CC="$cc" CFLAGS="$cflags $cnooptflags" \
-          ./configure $mdgxflag > ../fftw3_config.log 2>&1
-      ncerror=$?
-      if [ $ncerror -gt 0 ]; then
-          echo "    Error: FFTW configure returned $ncerror"
-          echo "    FFTW configure failed! Check the fftw3_config.log file."
-          exit 1
-      else
-          echo "    fftw-3.2.2 configure succeeded."
-      fi
-      cd ..
-  fi
-
-  #--------------------------------------------------------------------------
   #  Configure python
   #--------------------------------------------------------------------------
   if [ "$pyinstall" = 'python' ]; then
@@ -1792,27 +1771,6 @@
           echo
           echo "Configuring fftw-2.1.5 (may be time-consuming)..."
           echo
-          cd fftw-2.1.5
-          if [ "$mpi" = 'yes' ]; then
-              ./configure $rismflag --enable-mpi \
-              CC="$cc" CFLAGS="$cflags $coptflags" \
-              F77="$fc" FFLAGS="$fflags $foptflags" \
-                  FLIBS="$flibs_arch" > ../fftw2_config.log 2>&1
-          else
-              ./configure $rismflag \
-              CC="$cc" CFLAGS="$cflags $coptflags" \
-              F77="$fc" FFLAGS="$fflags $foptflags" \
-                  FLIBS="$flibs_arch" > ../fftw2_config.log 2>&1
-          fi
-          ncerror=$?
-          if [ $ncerror -gt 0 ]; then
-              echo "    Error: fftw configure returned $ncerror"
-              echo "    fftw configure failed!  Check the fftw2_config.log file."
-              exit 1
-          else
-              echo "    fftw-2.1.5 configure succeeded."
-          fi
-          cd ..
           flibs_fftw2="-ldrfftw -ldfftw"
           if [ "$mpi" = 'yes' ]; then
               flibs_fftw2="-ldrfftw_mpi -ldfftw_mpi $flibs_fftw2"
@@ -2004,7 +1962,7 @@
 AMBERLDFLAGS=\$(AMBERBUILDFLAGS)
 
 LEX=   $lex
-YACC=  \$(BINDIR)/yacc
+YACC=  byacc
 AR=    ar rv
 M4=    $m4
 RANLIB=$ranlib
diff -urN amber11.orig/AmberTools/src/cpptraj/src/Makefile_at amber11/AmberTools/src/cpptraj/src/Makefile_at
--- amber11.orig/AmberTools/src/cpptraj/src/Makefile_at	2011-10-25 15:01:28.076288672 +0300
+++ amber11/AmberTools/src/cpptraj/src/Makefile_at	2011-10-25 17:57:48.553749686 +0300
@@ -68,11 +68,8 @@
 	-/bin/rm FindDepend.o
 	-/bin/rm findDepend
 
-cpptraj$(SFX): $(NETCDFLIB) $(OBJECTS)
-	$(CXX) $(LDFLAGS) -o cpptraj$(SFX) $(OBJECTS) $(NETCDFLIB) $(ZLIB) $(BZLIB)
-
-$(NETCDFLIB): ../../netcdf_config.log
-	cd ../../netcdf/src && $(MAKE) install
+cpptraj$(SFX): $(OBJECTS)
+	$(CXX) $(LDFLAGS) -o cpptraj$(SFX) $(OBJECTS) $(NETCDFLIB) $(ZLIB) $(BZLIB) -lgomp
 
 .c.o:
 	$(CC) -c $(CPPTRAJ_FLAGS) -o $@ $<
diff -urN amber11.orig/AmberTools/src/Makefile amber11/AmberTools/src/Makefile
--- amber11.orig/AmberTools/src/Makefile	2011-04-14 15:30:12.000000000 +0300
+++ amber11/AmberTools/src/Makefile	2011-10-26 00:07:12.902565336 +0300
@@ -8,15 +8,9 @@
 
 install: $(INSTALLTYPE)
 
-serial: configured_serial $(NETCDFLIB) $(PYINSTALL) $(MTKPP)
+serial: configured_serial
 	@echo "Starting installation of ${AMBERTOOLS} serial at `date`".
 #	utility routines and libraries:
-	(cd ucpp-1.3 && $(MAKE) $(UCPP) )
-	(cd byacc && $(MAKE) install )
-	(cd arpack && $(MAKE) install );
-	(cd lapack && $(MAKE) $(LAPACK) )
-	(cd blas && $(MAKE) $(BLAS) )
-	(cd c9x-complex && $(MAKE) $(C9XCOMPLEX) )
 	(cd etc && $(MAKE) install )
 	(cd chamber && $(MAKE) install )
 	(cd pbsa && $(MAKE) install )
@@ -32,7 +26,6 @@
 	(cd cpptraj && $(MAKE) $(CPPTRAJ))
 
 #   miscellaneous:
-	(cd reduce && $(MAKE) install )
 
 #   leap and gleap:
 	(cd leap && $(MAKE) install )
@@ -42,7 +35,6 @@
 	(cd rism && $(MAKE) install )
 
 #   nab:
-	(cd cifparse && $(MAKE) install )
 	(cd sff && $(MAKE) install )
 	(cd pbsa && $(MAKE) libinstall )
 	(cd nab && $(MAKE) install )
@@ -63,19 +55,12 @@
 	@echo "Installation of ${AMBERTOOLS} serial is complete at `date`."
 	@echo ""
 
-nabonly: $(NETCDFLIB) 
+nabonly:
 #	utility routines and libraries:
-	(cd ucpp-1.3 && $(MAKE) $(UCPP) )
-	(cd byacc && $(MAKE) install )
-	(cd arpack && $(MAKE) install );
-	(cd lapack && $(MAKE) $(LAPACK) )
-	(cd blas && $(MAKE) $(BLAS) )
-	(cd c9x-complex && $(MAKE) $(C9XCOMPLEX) )
 	(cd pbsa && $(MAKE) libinstall )
 	(cd rism && $(MAKE) install )
 
 #	nab:
-	(cd cifparse && $(MAKE) install )
 	(cd sff && $(MAKE) install )
 	(cd nab && $(MAKE) install )
 	(cd nss && $(MAKE) install )
diff -urN amber11.orig/AmberTools/src/mdgx/Makefile amber11/AmberTools/src/mdgx/Makefile
--- amber11.orig/AmberTools/src/mdgx/Makefile	2011-04-14 15:30:17.000000000 +0300
+++ amber11/AmberTools/src/mdgx/Makefile	2011-10-25 15:32:04.007129323 +0300
@@ -109,7 +109,7 @@
 
 FFTW_LIBS = $(LIBDIR)/libfftw3.a
 
-mdgx$(SFX) : $(MDGX_OBJS) $(FFTW_LIBS) $(NETCDFLIB)
+mdgx$(SFX) : $(MDGX_OBJS)
 	$(CC) $(COPTFLAGS) $(CFLAGS) $(AMBERCFLAGS) \
 	-o $@ $(MDGX_OBJS) $(FFTW_LIBS) $(NETCDFLIB) $(LM)
 
diff -urN amber11.orig/AmberTools/src/pbsa/Makefile amber11/AmberTools/src/pbsa/Makefile
--- amber11.orig/AmberTools/src/pbsa/Makefile	2011-10-25 15:01:28.228288532 +0300
+++ amber11/AmberTools/src/pbsa/Makefile	2011-10-25 22:15:38.721245308 +0300
@@ -148,7 +148,7 @@
 	)
 
 #---------------------------------------------------------------------------
-pbsa$(SFX): $(OBJ) syslib netlib c9x-complex configured_serial
+pbsa$(SFX): $(OBJ) syslib configured_serial
 	$(FC) $(FFLAGS) $(AMBERFFLAGS) -o pbsa$(SFX) $(OBJ) \
 	        ../lib/nxtsec.o ../lib/random.o \
 	        $(FLIBSF) $(LDFLAGS) $(AMBERLDFLAGS)
@@ -158,7 +158,7 @@
 	        ../lib/nxtsec.o ../lib/random.o \
 	        $(FLIBSF) $(LDFLAGS) $(AMBERLDFLAGS)
 
-simplepbsa$(SFX): simplepbsa.o gopt.o libpbsa.a sfflib syslib netlib c9x-complex
+simplepbsa$(SFX): simplepbsa.o gopt.o libpbsa.a sfflib syslib
 	$(FC) $(FFLAGS) $(AMBERFFLAGS) -o simplepbsa$(SFX) simplepbsa.o gopt.o \
 		libpbsa.a $(LIBDIR)/libsff.a ../lib/nxtsec.o $(FLIBSF) \
 		$(LDFLAGS) $(AMBERLDFLAGS)
@@ -194,16 +194,6 @@
 sfflib:
 	cd ../sff && $(MAKE) install
 
-netlib: 
-	cd ../lapack && $(MAKE) $(LAPACK)
-	cd ../blas && $(MAKE) $(BLAS)
-	cd ../arpack && $(MAKE) install
-
-c9x-complex:
-	@if test $(C9XCOMPLEX) != "skip"; then \
-	   cd ../c9x-complex && $(MAKE) libmc.a; \
-	 fi
-
 pb_init.o: pb_init.f
 	$(FPP) $(FPPFLAGS) $(AMBERFPPFLAGS) $< > _$<
 	$(FC) -c -O0 $(FFLAGS) $(AMBERFFLAGS) -o $@ _$<
diff -urN amber11.orig/AmberTools/src/ptraj/Makefile amber11/AmberTools/src/ptraj/Makefile
--- amber11.orig/AmberTools/src/ptraj/Makefile	2011-04-14 15:30:19.000000000 +0300
+++ amber11/AmberTools/src/ptraj/Makefile	2011-10-25 22:16:34.407661018 +0300
@@ -57,25 +57,20 @@
 pubfft.o:  pubfft.f
 	$(FC) -c $(FREEFORMAT_FLAG) $(FOPTFLAGS) $(FFLAGS) $(AMBERFFLAGS) -o $@ $<
 
-rdparm$(SFX): libs $(NETCDFLIB) $(OBJECTS)
+rdparm$(SFX): libs $(OBJECTS)
 	$(CC) $(CFLAGS) $(AMBERCFLAGS) $(LDFLAGS) $(AMBERLDFLAGS) \
 		-o rdparm$(SFX) $(OBJECTS) $(LIBS) $(NETCDFLIB) $(LM)
 
-ptraj$(SFX): libs netlib $(NETCDFLIB) $(OBJECTS)
+ptraj$(SFX): libs $(OBJECTS)
 	$(CC) $(CFLAGS) $(AMBERCFLAGS) $(LDFLAGS) $(AMBERLDFLAGS) \
 		-o ptraj$(SFX) $(OBJECTS) $(LIBS) $(NETCDFLIB) $(LM)
 
-ptraj.MPI$(SFX): libs netlib $(PNETCDFLIB) $(OBJECTS)
+ptraj.MPI$(SFX): libs $(PNETCDFLIB) $(OBJECTS)
 	$(CC) $(CFLAGS) $(AMBERCFLAGS) $(LDFLAGS) $(AMBERLDFLAGS) \
 		-o ptraj.MPI$(SFX) $(OBJECTS) $(LIBS) $(PNETCDFLIB) $(LM)
 
 libs: 
 	cd pdb && $(MAKE) 
-	cd ../arpack && $(MAKE)
-
-netlib:
-	cd ../lapack && $(MAKE) $(LAPACK)
-	cd ../blas && $(MAKE) $(BLAS)
 
 clean:
 	cd pdb && $(MAKE) clean
diff -urN amber11.orig/AmberTools/src/ptraj/netcdf_ptraj.h amber11/AmberTools/src/ptraj/netcdf_ptraj.h
--- amber11.orig/AmberTools/src/ptraj/netcdf_ptraj.h	2011-04-14 15:30:19.000000000 +0300
+++ amber11/AmberTools/src/ptraj/netcdf_ptraj.h	2011-10-25 15:32:04.009129320 +0300
@@ -4,7 +4,7 @@
 #    include "../../include/pnetcdf.h"
 #    define nc_strerror ncmpi_strerror
 #  else
-#    include "../../include/netcdf.h"
+#    include <netcdf.h>
 #  endif 
 #endif
 
diff -urN amber11.orig/AmberTools/src/ptraj/ptraj.h amber11/AmberTools/src/ptraj/ptraj.h
--- amber11.orig/AmberTools/src/ptraj/ptraj.h	2011-04-14 15:30:19.000000000 +0300
+++ amber11/AmberTools/src/ptraj/ptraj.h	2011-10-25 15:32:04.009129320 +0300
@@ -94,7 +94,7 @@
 #define nc_strerror ncmpi_strerror
 #include "../../include/pnetcdf.h"
 #else
-#include "../../include/netcdf.h"
+#include <netcdf.h>
 #endif
 #endif
 
diff -urN amber11.orig/AmberTools/src/ptraj/trajectory.c amber11/AmberTools/src/ptraj/trajectory.c
--- amber11.orig/AmberTools/src/ptraj/trajectory.c	2011-03-10 20:12:15.000000000 +0200
+++ amber11/AmberTools/src/ptraj/trajectory.c	2011-10-26 22:25:04.192375511 +0300
@@ -1314,7 +1314,7 @@
 {
   fpos_t fileMarker;         /* marker for current file postition */
   char *junk;
-  char buffer[120];
+  char buffer[BUFFER_SIZE];
   char coords[26];    /* room for 24 characters (3f8.3) + \n + (char) 0  */
   char c;     
   int j,ret;
diff -urN amber11.orig/AmberTools/src/rism/Makefile amber11/AmberTools/src/rism/Makefile
--- amber11.orig/AmberTools/src/rism/Makefile	2011-04-14 15:30:19.000000000 +0300
+++ amber11/AmberTools/src/rism/Makefile	2011-10-25 15:32:04.010129318 +0300
@@ -49,7 +49,7 @@
 	mdiis_orig_c.o mdiis_blas_c.o mdiis_blas2_c.o mdiis_c.o \
 	fce_c.o erfcfun.o safemem.o blend.o timer_c.o
 
-librism: $(LIBOBJ) $(FLIBS_FFTW2)
+librism: $(LIBOBJ)
 	$(AR) $(LIBDIR)/$@.a $(LIBOBJ)
 	$(RANLIB) $(LIBDIR)/$@.a
 
diff -urN amber11.orig/AmberTools/src/sff/AmberNetcdf.c amber11/AmberTools/src/sff/AmberNetcdf.c
--- amber11.orig/AmberTools/src/sff/AmberNetcdf.c	2011-04-14 15:30:19.000000000 +0300
+++ amber11/AmberTools/src/sff/AmberNetcdf.c	2011-10-25 15:32:04.010129318 +0300
@@ -27,7 +27,7 @@
 #endif
     
 #ifdef BINTRAJ
-#include "../../include/netcdf.h"
+#include <netcdf.h>
 
 #define NCFRAME "frame"
 #define NCSPATIAL "spatial"
diff -urN amber11.orig/AmberTools/src/sff/dsarpack.f amber11/AmberTools/src/sff/dsarpack.f
--- amber11.orig/AmberTools/src/sff/dsarpack.f	1970-01-01 03:00:00.000000000 +0300
+++ amber11/AmberTools/src/sff/dsarpack.f	2011-10-25 19:52:58.579517634 +0300
@@ -0,0 +1,654 @@
+      subroutine dsarpack(n_dim,n_eig_in,n_eig_out,ncv_in,itr_in,
+     &                    eigval_tol,eigvals,eigvecs,spectrum,
+     &                    need_eigvecs,ierr,debug_arpack,
+     &                    v,workl,workd,d,resid,ax,select,
+     &                    xyz,grad,return_flag,label)
+c
+      implicit none
+c
+c     %-----------------%
+c     | Dummy Arguments |
+c     %-----------------%
+c
+      integer n_dim,n_eig_in,n_eig_out,ncv_in,itr_in,spectrum,
+     &        need_eigvecs,ierr,debug_arpack,return_flag,label
+      Double precision eigval_tol
+      Double precision eigvals(n_eig_in),eigvecs(n_dim * n_eig_in)
+      Double precision v(n_dim,ncv_in),
+     &                 workl(ncv_in*(ncv_in+8)),workd(3*n_dim),
+     &                 d(ncv_in,2),resid(n_dim),ax(n_dim),
+     &                 xyz(n_dim),grad(n_dim)
+      logical select(ncv_in)
+c
+      save
+c
+c     %---------------%
+c     | Include Files |
+c     %---------------%
+c
+c     include 'debug.h'
+c
+c\SCCS Information: @(#) 
+c FILE: debug.h   SID: 2.3   DATE OF SID: 11/16/95   RELEASE: 2 
+c
+c     %---------------------------------%
+c     | See debug.doc for documentation |
+c     %---------------------------------%
+      integer  logfil, ndigit, mgetv0,
+     &         msaupd, msaup2, msaitr, mseigt, msapps, msgets, mseupd,
+     &         mnaupd, mnaup2, mnaitr, mneigh, mnapps, mngets, mneupd,
+     &         mcaupd, mcaup2, mcaitr, mceigh, mcapps, mcgets, mceupd
+      common /debug/ 
+     &         logfil, ndigit, mgetv0,
+     &         msaupd, msaup2, msaitr, mseigt, msapps, msgets, mseupd,
+     &         mnaupd, mnaup2, mnaitr, mneigh, mnapps, mngets, mneupd,
+     &         mcaupd, mcaup2, mcaitr, mceigh, mcapps, mcgets, mceupd
+c
+c     This code shows how to use ARPACK to find a few eigenvalues 
+c     (lambda) and corresponding eigenvectors (x) for the standard 
+c     eigenvalue problem:
+c          
+c                        A*x = lambda*x
+c 
+c     where A is an n by n real symmetric matrix.
+c
+c     The main points illustrated here are 
+c
+c        1) How to declare sufficient memory to find NEV 
+c           eigenvalues of largest magnitude.  Other options
+c           are available.
+c
+c        2) Illustration of the reverse communication interface 
+c           needed to utilize the top level ARPACK routine DSAUPD 
+c           that computes the quantities needed to construct
+c           the desired eigenvalues and eigenvectors(if requested).
+c
+c        3) How to extract the desired eigenvalues and eigenvectors
+c           using the ARPACK routine DSEUPD.
+c
+c     The only thing that must be supplied in order to use this
+c     routine on your problem is to change the array dimensions 
+c     appropriately, to specify WHICH eigenvalues you want to compute 
+c     and to supply a matrix-vector product
+c
+c                         w <-  Av
+c
+c     in place of the call to AV( ) below.
+c
+c     Once usage of this routine is understood, you may wish to explore
+c     the other available options to improve convergence, to solve generalized
+c     problems, etc.  Look at the file ex-sym.doc in DOCUMENTS directory.
+c     This codes implements  
+c
+c\Example-1
+c     ... Suppose we want to solve A*x = lambda*x in regular mode,
+c         where A is derived from the central difference discretization
+c         of the 2-dimensional Laplacian on the unit square with
+c         zero Dirichlet boundary condition.
+c     ... OP = A  and  B = I.
+c     ... Assume "call av (n,x,y)" computes y = A*x
+c     ... Use mode 1 of DSAUPD.
+c
+c\BeginLib
+c
+c\Routines called:
+c     dsaupd  ARPACK reverse communication interface routine.
+c     dseupd  ARPACK routine that returns Ritz values and (optionally)
+c             Ritz vectors.
+c     dnrm2   Level 1 BLAS that computes the norm of a vector.
+c     daxpy   Level 1 BLAS that computes y <- alpha*x+y.
+c
+c\Author
+c     Richard Lehoucq
+c     Danny Sorensen
+c     Chao Yang
+c     Dept. of Computational &
+c     Applied Mathematics
+c     Rice University
+c     Houston, Texas
+c
+c\SCCS Information: %Z%
+c FILE: %M%   SID: %I%   DATE OF SID: %G%   RELEASE: %R%
+c
+c\Remarks
+c     1. None
+c
+c\EndLib
+c
+c-----------------------------------------------------------------------
+c
+c     %-------------------------------------------------------%
+c     | Storage Declarations:                                 |
+c     |                                                       |
+c     | The maximum dimensions for all arrays are             |
+c     | set here to accommodate a problem size of             |
+c     | N .le. MAXN                                           |
+c     |                                                       |
+c     | NEV is the number of eigenvalues requested.           |
+c     |     See specifications for ARPACK usage below.        |
+c     |                                                       |
+c     | NCV is the largest number of basis vectors that will  |
+c     |     be used in the Implicitly Restarted Arnoldi       |
+c     |     Process.  Work per major iteration is             |
+c     |     proportional to N*NCV*NCV.                        |
+c     |                                                       |
+c     | You must set:                                         |
+c     |                                                       |
+c     | MAXN:   Maximum dimension of the A allowed. (dynamic) |
+c     | MAXNEV: Maximum NEV allowed. (dynamic)                |
+c     | MAXNCV: Maximum NCV allowed. (dynamic)                |
+c     %-------------------------------------------------------%
+c
+C     %--------------------------------------%
+C     | F90 Allocatable Arrays (on the heap) |
+C     %--------------------------------------%
+c
+C     Double precision,allocatable,save :: v(:,:)
+C     integer,save :: v_row_allocated = 0, v_col_allocated = 0
+c
+c     %----------------------------------------------%
+c     | Originally, as F77 parameters, the following |
+c     | integers were used to dimension work arrays. |
+c     | They are replaced by dummy arguments used to |
+c     | dimension the work arrays as F90 automatic   |
+c     | arrays, but the integers are still used for  |
+c     | passing the dimensions to lower level ARPACK |
+c     | routines dsaupd, dseupd and dmout.           |
+c     %----------------------------------------------%
+c
+      integer          maxn, maxnev, maxncv, ldv
+c
+c     %-------------------------------------------%
+c     | Local F90 Automatic Arrays (on the stack) |
+c     %-------------------------------------------%
+c
+      Double precision
+C    &                 workl(ncv_in*(ncv_in+8)),
+C    &                 workd(3*n_dim), d(ncv_in,2), resid(n_dim),
+C    &                 ax(n_dim),
+     &                 cg_dstat(4)
+C     logical          select(ncv_in)
+      integer          iparam(11), ipntr(11),
+     &                 cg_istat(4)
+c
+c     %---------------%
+c     | Local Scalars |
+c     %---------------%
+c
+      character        bmat*1, which*2
+      integer          ido, n, nev, ncv, lworkl, info,
+     &                 i, j, nx, ishfts, maxitr, mode1, nconv
+      integer          L12, L18, ARPACK_ERROR, status_flag
+      data             L12, L18, ARPACK_ERROR /1, 2, -2/
+C     integer          v_row_needed, v_col_needed
+      logical          rvec
+      Double precision      
+     &                 tol, sigma
+c
+c     %------------%
+c     | Parameters |
+c     %------------%
+c
+      Double precision
+     &                 zero
+      parameter        (zero = 0.0D+0)
+c  
+c     %-----------------------------%
+c     | BLAS & LAPACK routines used |
+c     %-----------------------------%
+c
+      Double precision           
+     &                 dnrm2
+      external         dnrm2, daxpy, hessvec
+c
+c     %--------------------%
+c     | Intrinsic function |
+c     %--------------------%
+c
+      intrinsic        abs
+c
+c     %-----------------------%
+c     | Executable Statements |
+c     %-----------------------%
+c
+      if ( label.eq.0 ) go to 1
+      go to (12,18) label
+  1   continue
+c
+c     %------------------------------------------------%
+c     | Values used to calculate work array dimensions |
+c     %------------------------------------------------%
+c
+      maxn = n_dim
+      maxnev = n_eig_in
+      maxncv = ncv_in
+      ldv = maxn
+c
+c     %---------------------------------------------------%
+c     | The include debug.h statement above and           |
+c     | assignments here initiate trace output from the   |
+c     | internal actions of ARPACK.  See debug.doc in the |
+c     | DOCUMENTS directory for usage.  Initially, the    |
+c     | most useful information will be a breakdown of    |
+c     | time spent in the various stages of computation   |
+c     | given by setting msaupd = 1.                      |
+c     %---------------------------------------------------%
+c
+      ndigit = -5
+      logfil = 6
+      msgets = 0
+      msaitr = 0 
+      msapps = 0
+      if ( debug_arpack.eq.1 ) then
+        msaupd = 1
+      else
+        msaupd = 0
+      endif
+      msaup2 = 0
+      mseigt = 0
+      mseupd = 0
+c     
+c   *** Allocatable array v will be allowed to grow to its largest size;
+c   ***  it is never deallocated:
+C     v_row_needed = n_dim        !!! ldv
+C     v_col_needed = ncv_in       !!! maxncv
+C     if( allocated(v) )then
+C       if( (v_row_needed .gt. v_row_allocated)
+C    & .or. (v_col_needed .gt. v_col_allocated) )then
+C         deallocate(v,stat=ierr)
+C         if( ierr .ne. 0 )then
+C           write( logfil, '(a,i16,1x,i8)' )
+C    &       'ARPACK: could not deallocate v'
+C           go to 9000
+C         endif
+C       endif
+C     endif
+C     if( .not. allocated(v) )then
+C       allocate( v(v_row_needed,v_col_needed), stat=ierr )
+C       if( ierr .ne. 0 )then
+C         write( logfil, '(a,2i10)' )
+C    &     'ARPACK: could not allocate v'
+C         go to 9000
+C       endif
+C       v_row_allocated = v_row_needed
+C       v_col_allocated = v_col_needed
+C     endif
+C     v = zero !!! zero out entire v array
+c     
+c     %-------------------------------------------------%
+c     | The following sets dimensions for this problem. |
+c     %-------------------------------------------------%
+c
+      n = n_dim
+c
+c     %----------------------------------------------%
+c     |                                              | 
+c     | Specifications for ARPACK usage are set      | 
+c     | below:                                       |
+c     |                                              |
+c     |    1) NEV = N_EIG_IN  asks for N_EIG_IN      |  
+c     |       eigenvalues to be computed.            | 
+c     |                                              |
+c     |    2) NCV = NCV_IN sets the length of the    |
+c     |       Arnoldi factorization                  |
+c     |                                              |
+c     |    3) This is a standard problem             |
+c     |         (indicated by bmat  = 'I')           |
+c     |                                              |
+c     |    4) Ask for the NEV eigenvalues of         |
+c     |       smallest magnitude                     |
+c     |         (indicated by which = 'SM')          |
+c     |       See documentation in SSAUPD for the    |
+c     |       other options SA, LA, LM, BE.          | 
+c     |                                              |
+c     | Note: NEV and NCV must satisfy the following |
+c     | conditions:                                  |
+c     |              NEV <= MAXNEV                   |
+c     |          NEV + 1 <= NCV <= MAXNCV            |
+c     %----------------------------------------------%
+c
+      nev   = n_eig_in
+      ncv   = ncv_in 
+      bmat  = 'I'
+      if ( spectrum .eq. 1 ) then
+         which = 'SM'
+      else if ( spectrum .eq. 2 ) then
+         which = 'SA'
+      else if ( spectrum .eq. 3 ) then
+         which = 'LM'
+      else if ( spectrum .eq. 4 ) then
+         which = 'LA'
+      else if ( spectrum .eq. 5 ) then
+         which = 'BE'
+      else
+          print *, ' ERROR with _SSIMP: Spectrum .NE. (SM|SA|LA|LM|BE)'
+         go to 9000
+      end if
+c
+      if ( n .gt. maxn ) then
+         print *, ' ERROR with _SSIMP: N is greater than MAXN '
+         go to 9000
+      else if ( nev .gt. maxnev ) then
+         print *, ' ERROR with _SSIMP: NEV is greater than MAXNEV '
+         go to 9000
+      else if ( ncv .gt. maxncv ) then
+         print *, ' ERROR with _SSIMP: NCV is greater than MAXNCV '
+         go to 9000
+      end if
+c
+c     %-----------------------------------------------------%
+c     |                                                     |
+c     | Specification of stopping rules and initial         |
+c     | conditions before calling DSAUPD                    |
+c     |                                                     |
+c     | TOL  determines the stopping criterion.             |
+c     |                                                     |
+c     |      Expect                                         |
+c     |           abs(lambdaC - lambdaT) < TOL*abs(lambdaC) |
+c     |               computed   true                       |
+c     |                                                     |
+c     |      If TOL .le. 0,  then TOL <- macheps            |
+c     |           (machine precision) is used.              |
+c     |                                                     |
+c     | IDO  is the REVERSE COMMUNICATION parameter         |
+c     |      used to specify actions to be taken on return  |
+c     |      from DSAUPD. (See usage below.)                |
+c     |                                                     |
+c     |      It MUST initially be set to 0 before the first |
+c     |      call to DSAUPD.                                | 
+c     |                                                     |
+c     | INFO on entry specifies starting vector information |
+c     |      and on return indicates error codes            |
+c     |                                                     |
+c     |      Initially, setting INFO=0 indicates that a     | 
+c     |      random starting vector is requested to         |
+c     |      start the ARNOLDI iteration.  Setting INFO to  |
+c     |      a nonzero value on the initial call is used    |
+c     |      if you want to specify your own starting       |
+c     |      vector (This vector must be placed in RESID.)  | 
+c     |                                                     |
+c     | The work array WORKL is used in DSAUPD as           | 
+c     | workspace.  Its dimension LWORKL is set as          |
+c     | illustrated below.                                  |
+c     |                                                     |
+c     %-----------------------------------------------------%
+c
+      lworkl = ncv*(ncv+8)
+      tol = eigval_tol 
+      info = 0
+      ido = 0
+c
+c     %---------------------------------------------------%
+c     | Specification of Algorithm Mode:                  |
+c     |                                                   |
+c     | This program uses the exact shift strategy        |
+c     | (indicated by setting PARAM(1) = 1).              |
+c     | IPARAM(3) specifies the maximum number of Arnoldi |
+c     | iterations allowed.  Mode 1 of DSAUPD is used     |
+c     | (IPARAM(7) = 1). All these options can be changed |
+c     | by the user. For details see the documentation in |
+c     | DSAUPD.                                           |
+c     %---------------------------------------------------%
+c
+      ishfts = 1
+      maxitr = itr_in 
+      mode1 = 1
+c
+      iparam(1) = ishfts
+c                
+      iparam(3) = maxitr
+c                  
+      iparam(7) = mode1
+c
+c     %------------------------------------------------%
+c     | M A I N   L O O P (Reverse communication loop) |
+c     %------------------------------------------------%
+c
+ 10   continue
+c
+c        %---------------------------------------------%
+c        | Repeatedly call the routine DSAUPD and take | 
+c        | actions indicated by parameter IDO until    |
+c        | either convergence is indicated or maxitr   |
+c        | has been exceeded.                          |
+c        %---------------------------------------------%
+c
+         call dsaupd ( ido, bmat, n, which, nev, tol, resid, 
+     &                 ncv, v, ldv, iparam, ipntr, workd, workl,
+     &                 lworkl, info )
+c
+         if (ido .eq. -1 .or. ido .eq. 1) then
+c
+c           %--------------------------------------%
+c           | Perform matrix vector multiplication |
+c           |              y <--- OP*x             |
+c           | The user should supply his/her own   |
+c           | matrix vector multiplication routine |
+c           | here that takes workd(ipntr(1)) as   |
+c           | the input, and return the result to  |
+c           | workd(ipntr(2)).                     |
+c           %--------------------------------------%
+c
+            status_flag = 0
+ 11         continue
+               call hessvec ( n, workd(ipntr(1)), workd(ipntr(2)),
+     &                        xyz, grad, return_flag, status_flag )
+               if ( status_flag.eq.0 ) go to 13
+               if ( status_flag.lt.0 ) go to 9000
+               label = L12
+               return
+ 12         go to 11
+ 13         continue
+c
+c           %-----------------------------------------%
+c           | L O O P   B A C K to call DSAUPD again. |
+c           %-----------------------------------------%
+c
+            go to 10
+c
+         end if 
+c
+c     %----------------------------------------%
+c     | Either we have convergence or there is |
+c     | an error.                              |
+c     %----------------------------------------%
+c
+      if ( info .lt. 0 ) then
+c
+c        %--------------------------%
+c        | Error message. Check the |
+c        | documentation in DSAUPD. |
+c        %--------------------------%
+c
+         print *, ' '
+         print *, ' Error with _saupd, info = ', info
+         print *, ' Check documentation in _saupd '
+         print *, ' '
+         go to 9000
+c
+      else 
+c
+c        %-------------------------------------------%
+c        | No fatal errors occurred.                 |
+c        | Post-Process using DSEUPD.                |
+c        |                                           |
+c        | Computed eigenvalues may be extracted.    |  
+c        |                                           |
+c        | Eigenvectors may be also computed now if  |
+c        | desired.  (indicated by rvec = .true.)    | 
+c        |                                           |
+c        | The routine DSEUPD now called to do this  |
+c        | post processing (Other modes may require  |
+c        | more complicated post processing than     |
+c        | mode1.)                                   |
+c        |                                           |
+c        %-------------------------------------------%
+c           
+         if ( need_eigvecs .eq. 1 ) then
+            rvec = .true.
+         else
+            rvec = .false.
+         end if
+c
+         call dseupd ( rvec, 'All', select, d, v, ldv, sigma, 
+     &        bmat, n, which, nev, tol, resid, ncv, v, ldv, 
+     &        iparam, ipntr, workd, workl, lworkl, ierr )
+c
+c        %----------------------------------------------%
+c        | Eigenvalues are returned in the first column |
+c        | of the two dimensional array D and the       |
+c        | corresponding eigenvectors are returned in   |
+c        | the first NCONV (=IPARAM(5)) columns of the  |
+c        | two dimensional array V if requested.        |
+c        | Otherwise, an orthogonal basis for the       |
+c        | invariant subspace corresponding to the      |
+c        | eigenvalues in D is returned in V.           |
+c        %----------------------------------------------%
+c
+         if ( ierr .ne. 0) then
+c
+c           %------------------------------------%
+c           | Error condition:                   |
+c           | Check the documentation of DSEUPD. |
+c           %------------------------------------%
+c
+            print *, ' '
+            print *, ' Error with _seupd, info = ', ierr
+            print *, ' Check the documentation of _seupd. '
+            print *, ' '
+            go to 9000
+c
+         else if ( debug_arpack.eq.1 ) then
+c
+            nconv =  iparam(5)
+            n_eig_out = nconv
+            if ( nconv .le. 0 ) then
+               print *, ' '
+               print *, ' ARPACK: Not a single mode converged.'
+               print *, ' '
+               go to 9000
+            endif
+c
+C           %--------------------------------------------%
+C           | "UnDO" DO 20 j=1,nconv loop, because it is |
+C           | illegal to jump in and out from a DO loop. |
+C           %--------------------------------------------%
+c
+            j = 1
+ 16         continue
+c
+c              %---------------------------%
+c              | Compute the residual norm |
+c              |                           |
+c              |   ||  A*x - lambda*x ||   |
+c              |                           |
+c              | for the NCONV accurately  |
+c              | computed eigenvalues and  |
+c              | eigenvectors.  (iparam(5) |
+c              | indicates how many are    |
+c              | accurate to the requested |
+c              | tolerance)                |
+c              %---------------------------%
+c
+               status_flag = 0
+ 17            continue
+                  call hessvec ( n, v(1,j), ax, xyz, grad,
+     &                           return_flag, status_flag )
+                  if ( status_flag.eq.0 ) go to 19
+                  if ( status_flag.lt.0 ) go to 9000
+                  label = L18
+                  return
+ 18            go to 17
+ 19            continue
+c
+               call daxpy(n, -d(j,1), v(1,j), 1, ax, 1)
+               d(j,2) = dnrm2(n, ax, 1)
+               d(j,2) = d(j,2) / abs(d(j,1))
+c
+               j = j + 1
+               if ( j .gt. nconv ) go to 20
+c
+               go to 16
+c
+ 20         continue
+c
+c           %-----------------------------%
+c           | Display computed residuals. |
+c           %-----------------------------%
+c
+            call dmout(6, nconv, 2, d, maxncv, -6,
+     &           'Ritz values and relative residuals')
+c
+c           %-------------------------------------------%
+c           | Print additional convergence information. |
+c           %-------------------------------------------%
+c
+            if ( info .eq. 1) then
+               print *, ' '
+               print *, ' Maximum number of iterations reached.'
+               print *, ' '
+            else if ( info .eq. 3) then
+               print *, ' '
+               print *, ' No shifts could be applied during implicit',
+     &                  ' Arnoldi update, try increasing NCV.'
+               print *, ' '
+            end if
+c
+            print *, ' '
+            print *, ' _SSIMP '
+            print *, ' ====== '
+            print *, ' '
+            print *, ' Size of the matrix is ', n
+            print *, ' The number of Ritz values requested is ', nev
+            print *, ' The number of Arnoldi vectors generated',
+     &               ' (NCV) is ', ncv
+            print *, ' What portion of the spectrum: ', which
+            print *, ' The number of converged Ritz values is ',
+     &                 nconv
+            print *, ' The number of Implicit Arnoldi update',
+     &               ' iterations taken is ', iparam(3)
+            print *, ' The number of OP*x is ', iparam(9)
+            print *, ' The convergence criterion is ', tol
+            print *, ' '
+         end if
+c
+c        %----------------------------%
+c        | Return eigvals and eigvecs |
+c        %----------------------------%
+c
+         nconv =  iparam(5)
+         n_eig_out = nconv
+         if ( nconv .le. 0 ) then
+            print *, ' '
+            print *, ' ARPACK: Not a single mode converged.'
+            print *, ' '
+            go to 9000
+         endif
+c
+         do 40 j=1, nconv
+             eigvals(j) = d(j,1)
+c
+             do 30 i=1, n
+                eigvecs((j-1)*n+i) = v(i,j)
+ 30          continue
+ 40      continue
+c
+      end if
+c
+c     %--------------------------------%
+c     | Done with subroutine dsarpack. |
+c     %--------------------------------%
+c
+      label = 0
+      return
+c
+ 9000 continue !!! Error
+c
+      if( status_flag.eq.0 ) status_flag = ARPACK_ERROR
+c
+      label = status_flag
+      return
+c
+      end
+c 
+c ------------------------------------------------------------------
diff -urN amber11.orig/AmberTools/src/sff/Makefile amber11/AmberTools/src/sff/Makefile
--- amber11.orig/AmberTools/src/sff/Makefile	2011-04-14 15:30:19.000000000 +0300
+++ amber11/AmberTools/src/sff/Makefile	2011-10-25 22:11:23.964319736 +0300
@@ -1,11 +1,12 @@
 include ../config.h
 
 .c.o:
-	$(CC) -c -Dflex $(COPTFLAGS) $(CFLAGS) $(AMBERCFLAGS) $(RISMSFF) -o $@ $<
+	$(CC) -c -Dflex $(COPTFLAGS) $(CFLAGS) $(AMBERCFLAGS) $(RISMSFF) $(NETCDFLIB) -o $@ $<
 
 OBJS = binpos.o conjgrad.o lmodC.o memutil.o nblist.o newton.o nmode.o \
 	prm.o rand2.o sasad.o sff.o time.o xminC.o AmberNetcdf.o \
-	amber_rism_interface.o
+	amber_rism_interface.o \
+	dsarpack.o \
 
 install: libsff hcp_getpdb
 
diff -urN amber11.orig/AmberTools/src/sqm/Makefile amber11/AmberTools/src/sqm/Makefile
--- amber11.orig/AmberTools/src/sqm/Makefile	2011-04-14 15:30:20.000000000 +0300
+++ amber11/AmberTools/src/sqm/Makefile	2011-10-25 22:17:29.627071134 +0300
@@ -77,7 +77,7 @@
 install: sqm$(SFX)
 	mv sqm$(SFX) $(BINDIR)
 
-sqm$(SFX): $(SQMOBJ) $(QMOBJ) netlib sys
+sqm$(SFX): $(SQMOBJ) $(QMOBJ) sys
 	$(FC) $(FFLAGS) $(AMBERFFLAGS) -o sqm$(SFX) $(SQMOBJ) $(QMOBJ) \
 		$(FLIBSF) ../lib/sys.a $(LDFLAGS) $(AMBERLDFLAGS)
 
@@ -94,11 +94,6 @@
 sys:
 	cd ../lib; $(MAKE) sys.a
 
-netlib:
-	cd ../lapack; $(MAKE) $(LAPACK)
-	cd ../blas; $(MAKE) $(BLAS)
-	cd ../arpack && $(MAKE) install
-
 clean:
 	/bin/rm -f *.o _*.f *.mod *.d sqm$(SFX)
 
diff -urN amber11.orig/AmberTools/test/Makefile amber11/AmberTools/test/Makefile
--- amber11.orig/AmberTools/test/Makefile	2011-04-14 15:30:55.000000000 +0300
+++ amber11/AmberTools/test/Makefile	2011-10-25 22:36:59.285906153 +0300
@@ -12,7 +12,7 @@
 
 test.serial: clean is_amberhome_defined \
 	test.nab test.ptraj test.cpptraj test.antechamber \
-	test.leap test.sleap test.resp test.pbsa test.mmpbsa \
+	test.leap test.resp test.pbsa test.mmpbsa \
 	test.ambpdb test.elsize test.chamber test.sqm test.rism1d \
 	finished
 
diff -urN amber11.orig/AmberTools/test/test_at_serial.sh amber11/AmberTools/test/test_at_serial.sh
--- amber11.orig/AmberTools/test/test_at_serial.sh	2011-03-10 20:12:24.000000000 +0200
+++ amber11/AmberTools/test/test_at_serial.sh	2011-10-25 21:52:52.178189963 +0300
@@ -50,3 +50,9 @@
 else
    echo "No test diffs to save!"
 fi
+
+if [ "${questionable_count}" -ne 0 -o "${error_count}" -ne 0 ]
+then
+  # Tests failed
+  exit 1
+fi
